apply plugin: 'application'

dependencies {
	implementation project(':org.xtext.example.mydsl')
	implementation project(':org.xtext.example.mydsl.ide')
	implementation "org.eclipse.xtext:org.eclipse.xtext.ide:${xtextVersion}"
	implementation "org.eclipse.xtext:org.eclipse.xtext.xbase.ide:${xtextVersion}"
	implementation "org.slf4j:slf4j-api:1.7.22"
	implementation "org.slf4j:slf4j-simple:1.6.1"
	implementation "org.eclipse.lsp4j:org.eclipse.lsp4j.websocket"
	implementation "org.eclipse.jetty:jetty-server:9.4.16.v20190411"
	implementation "org.eclipse.jetty.websocket:javax-websocket-server-impl:9.4.16.v20190411"
}

// Add a start script for the websocket case
mainClassName = 'org.xtext.example.mydsl.websockets.ServerLauncher'
startScripts {
	applicationName = 'mydsl-websocket'
}

task standaloneStartScript(type: CreateStartScripts) {
	mainClassName = 'org.xtext.example.mydsl.websockets.ServerLauncher'
	applicationName = 'mydsl-websocket'
	outputDir = new File(project.buildDir, 'scripts')
	classpath = jar.outputs.files + project.configurations.runtimeClasspath
	
}

applicationDistribution.into("bin") {
	duplicatesStrategy "include"
	from(standaloneStartScript)
	fileMode = 0755
}

jar {
	manifest {
		attributes	'Implementation-Title': 'Websocket',
					'Implementation-Version': archiveVersion,
					'Main-Class': 'org.xtext.example.mydsl.websockets.ServerLauncher'
	}
}